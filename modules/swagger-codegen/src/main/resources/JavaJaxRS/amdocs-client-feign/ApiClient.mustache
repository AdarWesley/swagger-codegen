package {{invokerPackage}};

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import javax.inject.Inject;

import javax.ws.rs.core.HttpHeaders;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import org.springframework.security.core.context.SecurityContextHolder;

import com.amdocs.msf.server.core.security.ILSAuthentication;
import com.amdocs.msf.server.core.security.SecurityFilter;
import com.amdocs.msf.server.core.security.SecurityServices;
import com.amdocs.msf.server.core.context.AppContext;

import feign.Feign;
import feign.RequestInterceptor;
import feign.RequestTemplate;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
import feign.slf4j.Slf4jLogger;

public class ApiClient {
  public interface Api {}

  private ObjectMapper objectMapper;
  private String basePath = "{{basePath}}";
  private Map<String, RequestInterceptor> apiAuthorizations;
  private Feign.Builder feignBuilder;

  private HttpHeaders requestHeaderParameters = null;

  private static final String AUTHORIZATION_HEADER_KEY = "Authorization";

  class MSFSecurityInterceptor implements RequestInterceptor
  {
    SecurityServices securityServices = AppContext.getContext().getBean(SecurityServices.class);

    @Override
    public void apply(RequestTemplate template) 
    {
      if (requestHeaderParameters == null || requestHeaderParameters.getRequestHeader(AUTHORIZATION_HEADER_KEY) == null) {
        addDefaultAuthorizationHeader(template);
      }
      addCustomHeaders(template);
    }

    private void addDefaultAuthorizationHeader(RequestTemplate template)
    {
      ILSAuthentication auth = (ILSAuthentication)SecurityContextHolder.getContext().getAuthentication();
      StringBuilder sessionToken = new StringBuilder();
      sessionToken.append(SecurityFilter.SESSION_TOKEN_FIELD_NAME).append(":");

      try {
        sessionToken.append(securityServices.buildToken(auth));
      } catch (Exception e) {
        e.printStackTrace();
      }
      template.header(AUTHORIZATION_HEADER_KEY, sessionToken.toString());
    }

    private void addCustomHeaders(RequestTemplate template)
    {
      if (requestHeaderParameters != null)
      {
        for (Map.Entry<String, List<String>> headerEntry : requestHeaderParameters.getRequestHeaders().entrySet())
        {
          template.header(headerEntry.getKey(), headerEntry.getValue());
        }
      }
    }
  }

  public ApiClient() {
    objectMapper = createObjectMapper();
    feignBuilder = Feign.builder()
                .encoder(new JacksonEncoder(objectMapper))
                .decoder(new JacksonDecoder(objectMapper))
                .requestInterceptor(new MSFSecurityInterceptor())
                .logger(new Slf4jLogger());
  }

  public String getBasePath() {
    return basePath;
  }

  public ApiClient setBasePath(String basePath) {
    this.basePath = basePath;
    return this;
  }

  public Feign.Builder getFeignBuilder() {
    return feignBuilder;
  }

  public ApiClient setFeignBuilder(Feign.Builder feignBuilder) {
    this.feignBuilder = feignBuilder;
    return this;
  }

  private ObjectMapper createObjectMapper() {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
    objectMapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
    return objectMapper;
  }

  /**
   * Creates a feign client for given API interface.
   *
   * Usage:
   *    ApiClient apiClient = new ApiClient();
   *    apiClient.setBasePath("http://localhost:8080");
   *    XYZApi api = apiClient.buildClient(XYZApi.class);
   *    XYZResponse response = api.someMethod(...);
   */
  public <T extends Api> T buildClient(Class<T> clientClass) {
    return feignBuilder.target(clientClass, basePath);
  }

  /**
   * Select the Accept header's value from the given accepts array:
   *   if JSON exists in the given array, use it;
   *   otherwise use all of them (joining into a string)
   *
   * @param accepts The accepts array to select from
   * @return The Accept header to use. If the given array is empty,
   *   null will be returned (not to set the Accept header explicitly).
   */
  public String selectHeaderAccept(String[] accepts) {
    if (accepts.length == 0) return null;
    if (StringUtil.containsIgnoreCase(accepts, "application/json")) return "application/json";
    return StringUtil.join(accepts, ",");
  }

  /**
   * Select the Content-Type header's value from the given array:
   *   if JSON exists in the given array, use it;
   *   otherwise use the first one of the array.
   *
   * @param contentTypes The Content-Type array to select from
   * @return The Content-Type header to use. If the given array is empty,
   *   JSON will be used.
   */
  public String selectHeaderContentType(String[] contentTypes) {
    if (contentTypes.length == 0) return "application/json";
    if (StringUtil.containsIgnoreCase(contentTypes, "application/json")) return "application/json";
    return contentTypes[0];
  }

  public static <T extends Api> T getClient(String baseUrl, Class<T> clientClass)
  {
    ApiClient client = new ApiClient();
    client.setBasePath(baseUrl);
    return client.buildClient(clientClass);
  }

  public static <T extends Api> T getClient(String baseUrl, Class<T> clientClass, HttpHeaders requestHeaderParameters)
  {
    ApiClient client = new ApiClient();
    client.setBasePath(baseUrl);
    client.requestHeaderParameters = requestHeaderParameters;
    return client.buildClient(clientClass);
  }

}
