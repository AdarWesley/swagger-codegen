package {{package}};

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

import javax.ws.rs.core.MediaType;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestHeader;
import feign.Headers;
import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@SuppressWarnings("unused")
@FeignClient(url="${extconnection.{{baseName}}.{{#lowercase}}{{classname}}{{/lowercase}}.url}")
public interface {{classname}} {

{{#operations}}{{#operation}}
  /**
   * {{summary}}
   * {{notes}}
{{#allParams}}   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}   * @return {{#returnType}}{{>returnTypePartial}}{{/returnType}}{{^returnType}}void{{/returnType}}
   */
  @RequestMapping(
  		value = "{{{contextPath}}}{{{path}}}{{#hasQueryParams}}?{{/hasQueryParams}}{{#queryParams}}{{baseName}}={{=<% %>=}}{<%paramName%>}<%={{ }}=%>{{#hasMore}}&{{/hasMore}}{{/queryParams}}",
  		method = RequestMethod.{{httpMethod}}{{#hasConsumes}},
    	consumes = { {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }{{/hasConsumes}}{{#hasProduces}},
    	produces = { {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }{{/hasProduces}}
	) 
  @Headers({
    "Content-Type: {{vendorExtensions.x-contentType}}",
    "Accepts: {{vendorExtensions.x-accepts}}"
  })
  @{{httpMethod}}
  {{#returnType}}{{>returnTypePartial}} {{/returnType}}{{^returnType}}void {{/returnType}}{{nickname}}({{#allParams}}{{#isHeaderParam}}@RequestHeader("{{baseName}}") {{/isHeaderParam}}{{^isHeaderParam}}{{^isBodyParam}}{{#isQueryParam}}@PathVariable("{{paramName}}") {{/isQueryParam}}{{^isQueryParam}}@PathVariable("{{baseName}}") {{/isQueryParam}}{{/isBodyParam}}{{/isHeaderParam}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  {{/operation}}
{{/operations}}
}
